{
  # deploying contract `Test_if`
  {
    # creating contract creation parameters
    {
      # creating storage for contract `Test_if`
      {
        NIL int ;
        EMPTY_SET int ;
        PUSH bool True ;
        PUSH int 31557081646471584454601372 ;
        UPDATE ;
        PUSH bool True ;
        PUSH int 421 ;
        UPDATE ;
        PUSH bool True ;
        PUSH int 676 ;
        UPDATE ;
        PUSH bool True ;
        PUSH int 5 ;
        UPDATE ;
        PUSH bool True ;
        PUSH int 7 ;
        UPDATE ;
        PUSH bool True ;
        PUSH int 12780 ;
        UPDATE ;
        PAIR ;
        EMPTY_MAP string int ;
        PAIR ;
        NONE int ;
        PAIR ;
        PUSH bool True ;
        PAIR
      } ;
      # money transferred
      PUSH mutez 329091983899733 ;
      # delegatable
      PUSH bool True ;
      # spendable
      PUSH bool False ;
      # delegate
      {
        PUSH key "1be3ea0602fadcc503" ;
        BLAKE2B ;
        SOME
      } ;
      # manager
      {
        PUSH key "" ;
        HASH_KEY
      }
    } ;
    CREATE_CONTRACT "Test_if"
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT bool ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test_if`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 285017828402630 ;
    PUSH bool True ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT bool ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test_if`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 819915601566928 ;
    PUSH bool False ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  }
}
