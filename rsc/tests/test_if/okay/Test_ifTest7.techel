{
  # deploying contract `Test_if`
  {
    # creating contract creation parameters
    {
      # creating storage for contract `Test_if`
      {
        NIL int ;
        EMPTY_SET int ;
        PAIR ;
        EMPTY_MAP string int ;
        {
          PUSH int 203 ;
          NEG
        } ;
        SOME ;
        PUSH string "" ;
        UPDATE ;
        NONE int ;
        PUSH string "Et" ;
        UPDATE ;
        PUSH int 0 ;
        SOME ;
        PUSH string "kZM<%e8FR+9 " ;
        UPDATE ;
        NONE int ;
        PUSH string "" ;
        UPDATE ;
        PUSH int 7 ;
        SOME ;
        PUSH string "" ;
        UPDATE ;
        NONE int ;
        PUSH string "s8R" ;
        UPDATE ;
        NONE int ;
        PUSH string "" ;
        UPDATE ;
        NONE int ;
        PUSH string "|#" ;
        UPDATE ;
        NONE int ;
        PUSH string "" ;
        UPDATE ;
        NONE int ;
        PUSH string "" ;
        UPDATE ;
        PUSH int 0 ;
        SOME ;
        PUSH string "" ;
        UPDATE ;
        {
          PUSH int 35734464446706833671 ;
          NEG
        } ;
        SOME ;
        PUSH string "" ;
        UPDATE ;
        PAIR ;
        NONE int ;
        PAIR ;
        PUSH bool True ;
        PAIR
      } ;
      # money transferred
      PUSH mutez 659289911009130 ;
      # delegatable
      PUSH bool True ;
      # spendable
      PUSH bool True ;
      # delegate
      {
        PUSH key "" ;
        SHA256 ;
        SOME
      } ;
      # manager
      {
        PUSH key "" ;
        HASH_KEY
      }
    } ;
    CREATE_CONTRACT "Test_if"
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT bool ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test_if`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 213394943943241 ;
    PUSH bool True ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT bool ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test_if`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 860668968943136 ;
    PUSH bool True ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT bool ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test_if`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 669109316245971 ;
    PUSH bool False ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT bool ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test_if`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 572680915271974 ;
    PUSH bool True ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT bool ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test_if`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 187380196912665 ;
    PUSH bool False ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  }
}
