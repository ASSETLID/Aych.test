{
  # deploying contract `Test10`
  {
    # creating contract creation parameters
    {
      # creating storage for contract `Test10`
      {
        EMPTY_MAP string int ;
        NONE int ;
        PUSH string "" ;
        UPDATE ;
        NONE int ;
        PUSH string "!%Ra+,S<v" ;
        UPDATE ;
        NONE int ;
        PUSH string "" ;
        UPDATE ;
        NONE int ;
        PUSH string "" ;
        UPDATE ;
        NONE int ;
        PUSH string "QZt[d[]t N`!9@y`zSx{" ;
        UPDATE ;
        PUSH int 5477468280641105 ;
        SOME ;
        PUSH string "'L" ;
        UPDATE ;
        PUSH int 81505613140117436 ;
        SOME ;
        PUSH string "ij<poeuJ.ZEs;z/~'QMb6I)Cd]Sr+)v<NYmt" ;
        UPDATE ;
        NONE int ;
        PUSH string "%y $*WCJI-k-^nh.Vd4;O>Y" ;
        UPDATE ;
        {
          PUSH int 1 ;
          NEG
        } ;
        SOME ;
        PAIR ;
        PUSH bool False ;
        PAIR
      } ;
      # money transferred
      PUSH mutez 389781140525677 ;
      # delegatable
      PUSH bool False ;
      # spendable
      PUSH bool True ;
      # delegate
      {
        PUSH key "eea49800eaa67" ;
        BLAKE2B ;
        SOME
      } ;
      # manager
      {
        PUSH key "514fcacef" ;
        HASH_KEY
      }
    } ;
    CREATE_CONTRACT "Test10"
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT bool ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test10`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 596869000303779 ;
    PUSH bool True ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT bool ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test10`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 541088056718985 ;
    PUSH bool False ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT bool ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test10`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 309632011606741 ;
    PUSH bool False ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT bool ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test10`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 162212869377244 ;
    PUSH bool False ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT bool ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test10`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 129649884315130 ;
    PUSH bool False ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  } ;
  # create transfer operation
  {
    DUP ;
    # retrieve contract from address, fail if none
    {
      CONTRACT bool ;
      IF_NONE {
                PUSH string "unable to spawn contract `Test10`" ;
                FAILWITH
              }
              {}
    } ;
    PUSH mutez 840455030518689 ;
    PUSH bool True ;
    TRANSFER_TOKENS
  } ;
  # create a list of operations and apply
  {
    NIL operation ;
    SWAP ;
    CONS ;
    APPLY_OPERATIONS
  }
}
